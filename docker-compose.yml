version: "3.8"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_HEAP_OPTS: "-Xms256m -Xmx512m"
    # ports:
    #   - "9092:9092"


  mlflow:
    image: ghcr.io/mlflow/mlflow:latest   # official image; no pip at runtime
    working_dir: /srv
    command: >
      mlflow server --host 0.0.0.0 --port 5000
      --backend-store-uri sqlite:////srv/mlflow.db
      --artifacts-destination s3://${S3_BUCKET}/mlflow-artifacts
      --static-prefix /mlflow
    env_file: [.env]
    volumes:
      - ./mlruns:/srv


  api:
    build: ./api
    env_file: [.env]
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - PREDICTIONS_TOPIC=${PREDICTIONS_TOPIC}
      - MODEL_URI=${MODEL_URI}
      - IMAGE_SIZE=${IMAGE_SIZE}
      - S3_BUCKET=${S3_BUCKET}
      - S3_DATA_PREFIX=${S3_DATA_PREFIX}
    depends_on: [kafka, mlflow]

  trainer:
    build: ./training
    env_file: [.env]
    depends_on: [mlflow]
    profiles: ["train"]

  prometheus:
    image: prom/prometheus:v2.54.1
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.external-url=/prometheus'
      - '--web.route-prefix=/prometheus'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on: [api]

  grafana:
    image: grafana/grafana:11.1.0
    environment:
      - GF_SERVER_ROOT_URL=http://ec2-3-136-189-20.us-east-2.compute.amazonaws.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    depends_on: [prometheus]

  caddy:
    image: caddy:2.8
    depends_on: [api, grafana, prometheus, mlflow]
    ports:
      - "80:80"        # keep
      # - "443:443"    # remove or comment out for HTTP-only
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    environment:
      - ADMIN_USER=${ADMIN_USER}
      - ADMIN_HASH=${ADMIN_HASH}
      - SERVER_NAME=${SERVER_NAME}

volumes:
  caddy_data:
  caddy_config:
