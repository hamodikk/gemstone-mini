# .github/workflows/deploy-to-ec2.yml
name: deploy-to-ec2

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

concurrency:
  group: deploy-to-ec2
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Upload repo to EC2 (no secrets/artifacts)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
          source: "."
          target: "~/gemstone-mini"
          rm: false
          timeout: 90s
          command_timeout: 20m
          exclude: ".env,.git,**/__pycache__,mlruns,mlartifacts,caddy_data,caddy_config"

      - name: Build & start on EC2 (local build, no registry pulls)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
          script: |
            set -euo pipefail
            cd ~/gemstone-mini

            if [ ! -f .env ]; then
              echo "[ERROR] .env is missing on EC2. Create it once and keep it there."
              exit 1
            fi

            echo "==> Disk BEFORE"
            df -h || true
            docker system df || true

            echo "==> Stop stack & deep prune"
            docker compose down --remove-orphans || true
            docker system prune -af --volumes || true
            docker builder prune -af || true

            echo "==> Load .env (for API_IMAGE / TRAINER_IMAGE)"
            set -a
            . ./.env
            set +a

            API_IMAGE="${API_IMAGE:-gemstone-mini-api:local}"
            TRAINER_IMAGE="${TRAINER_IMAGE:-gemstone-mini-trainer:local}"

            echo "==> Building API -> ${API_IMAGE}"
            DOCKER_BUILDKIT=1 docker build -t "${API_IMAGE}" ./api

            if [ -d "./training" ]; then
              echo "==> Building TRAINER -> ${TRAINER_IMAGE}"
              DOCKER_BUILDKIT=1 docker build -t "${TRAINER_IMAGE}" ./training || true
            fi

            # Prevent compose from trying to pull from any registry
            export COMPOSE_PULL_POLICY=never

            echo "==> Start stack (no pulls)"
            docker compose up -d --force-recreate --remove-orphans

            echo "==> Status"
            docker compose ps
            docker system df || true
