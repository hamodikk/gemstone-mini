name: deploy-to-ec2

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

# Avoid overlapping runs (new push cancels the previous deploy)
concurrency:
  group: deploy-to-ec2
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Ship source ONLY (never .env or generated artifacts)
      - name: Upload repo to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
          source: "."
          target: "~/gemstone-mini"
          rm: false
          timeout: 90s
          command_timeout: 20m
          # Keep uploads small; adjust as you like
          exclude: ".env,.git,**/__pycache__,mlruns,mlartifacts,caddy_data,caddy_config"

      - name: Build & start on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          passphrase: ${{ secrets.EC2_SSH_PASSPHRASE }}
          port: ${{ secrets.EC2_PORT || 22 }}
          # Optional hardening: pin the server host key fingerprint
          # fingerprint: ${{ secrets.EC2_HOST_FINGERPRINT }}
          script: |
            set -euo pipefail
            cd ~/gemstone-mini

            # Ensure runtime secrets exist only on the server
            if [ ! -f .env ]; then
              echo "[ERROR] .env is missing on EC2. Create it once and keep it there."
              exit 1
            fi

            echo "==> Disk BEFORE prune:"
            df -h || true
            docker system df || true

            echo "==> Stop stack to free space..."
            docker compose down --remove-orphans || true

            echo "==> Deep prune to avoid 'no space left on device'..."
            docker system prune -af --volumes || true

            echo "==> Pull public images (fast for caddy/grafana/prometheus/mlflow)..."
            docker compose pull || true

            echo "==> Build local images if defined (api/trainer)..."
            docker compose build api trainer || true

            echo "==> Start stack..."
            docker compose up -d --force-recreate --remove-orphans

            echo "==> Current containers:"
            docker compose ps

            echo "==> Disk AFTER deploy:"
            df -h || true
            docker system df || true
